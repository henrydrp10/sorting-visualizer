{"version":3,"sources":["SortingAlgorithms/QuickSort.js","SortingAlgorithms/MergeSort.js","SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","App.js","serviceWorker.js","index.js"],"names":["animations","quickSortCall","array","quickSort","start","end","partition_index","push","mode","indices","pivot","smallest_index","index","partition","length","mergeSort","mid","Math","floor","lower_size","upper_size","lower_array","upper_array","lower_index","upper_index","merged_index","merge","SortingVisualizer","state","this","generateArray","i","ceil","random","setState","window","location","reload","nodes","document","getElementsByClassName","sorted","swap_count","bubbleSort","setTimeout","style","backgroundColor","oldValue","innerHTML","initialLength","value","loop_index","insertionSort","rect","getBoundingClientRect","position","top","pageYOffset","left","pageXOffset","clonedPivot","cloneNode","$","css","width","append","hide","newLeftPivot","newRightPivot","height","sortIndex","className","map","idx","key","onClick","refreshPage","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f94a26c.chunk.js","sourcesContent":["const MAIN_PIVOT = 0;\nconst LEFT_PIVOT = 1;\nconst RIGHT_PIVOT = 2;\nconst SWAP = 3;\nconst SORTED = 4;\n\nlet animations = [];\n\nexport function quickSortCall(array) {\n  array = quickSort(array, 0, array.length - 1);\n  return animations;\n}\n\nfunction quickSort(array, start, end) {\n  if (start < end) {\n    let partition_index = partition(array, start, end);\n    array = quickSort(array, start, partition_index - 1);\n    array = quickSort(array, partition_index + 1, end);\n  }\n  return array;\n} \n\nfunction partition(array, start, end) {\n  animations.push({mode: MAIN_PIVOT, indices:[end]});\n  let pivot = array[end];\n  let smallest_index = start - 1;\n\n  for (let index = start; index < end; index++) {\n    animations.push({mode: RIGHT_PIVOT, indices:[index]});\n    if (array[index] < pivot) {\n      animations.push({mode: LEFT_PIVOT, indices:[smallest_index + 1]});\n      smallest_index++;\n      animations.push({mode: SWAP, indices:[smallest_index, index]});\n      [array[smallest_index], array[index]] = [array[index], array[smallest_index]];\n    }\n  }\n  animations.push({mode: SORTED, indices:[smallest_index + 1, end]});\n  [array[smallest_index + 1], array[end]] = [array[end], array[smallest_index + 1]];\n  return smallest_index + 1;\n}","const animations = [];\nconst AUX_ARRAYS = 0;\nconst COMP = 1;\nconst SORT_PLACE = 2;\n\nexport function mergeSort(array, start, end) {\n  if (end > start) {\n    let mid = Math.floor((start + end) / 2);\n    mergeSort(array, start, mid);\n    mergeSort(array, mid + 1, end);\n    merge(array, start, mid, end);\n  }\n  return animations;\n}\n\n\nfunction merge(array, start, mid, end) {\n  animations.push({mode: AUX_ARRAYS, indices:[start, end]});\n  let lower_size = (mid + 1) - start;\n  let upper_size = (end - mid);\n\n  let lower_array = [];\n  let upper_array = [];\n\n  for (let index = 0; index < lower_size; index++) {\n    lower_array.push(array[start + index]);\n  }\n  for (let index = 0; index < upper_size; index++) {\n    upper_array.push(array[(mid + 1) + index]);\n  }\n\n  let lower_index = 0;\n  let upper_index = 0;\n  let merged_index = start;\n\n  while (lower_index < lower_size && upper_index < upper_size) {\n    animations.push({mode: COMP, indices:[start + lower_index, (mid + 1) + upper_index]});\n    if (lower_array[lower_index] <= upper_array[upper_index]) {\n      animations.push({mode: SORT_PLACE, indices:[merged_index, start + lower_index]});\n      array[merged_index] = lower_array[lower_index];\n      lower_index++;\n    } else {\n      animations.push({mode: SORT_PLACE, indices:[merged_index, (mid + 1) + upper_index]});\n      array[merged_index] = upper_array[upper_index];\n      upper_index++;\n    }\n    merged_index++;\n  }\n\n  while (lower_index < lower_size) {\n    animations.push({mode: SORT_PLACE, indices:[merged_index, start + lower_index]});\n    array[merged_index] = lower_array[lower_index];\n    lower_index++;\n    merged_index++;\n  }\n\n  while (upper_index < upper_size) {\n    animations.push({mode: SORT_PLACE, indices:[merged_index, (mid + 1) + upper_index]});\n    array[merged_index] = upper_array[upper_index];\n    upper_index++;\n    merged_index++;\n  }\n\n}\n\n","import React, { Component } from 'react';\nimport $ from \"jquery\";\nimport './SortingVisualizer.css';\nimport { bubbleSort } from '../SortingAlgorithms/BubbleSort';\nimport { insertionSort } from '../SortingAlgorithms/InsertionSort';\nimport { quickSortCall } from '../SortingAlgorithms/QuickSort';\nimport { mergeSort } from '../SortingAlgorithms/MergeSort';\n\nconst ALGO_SPEED = 100;\n\nexport class SortingVisualizer extends Component {\n\n  state = {\n    array: []\n  };\n\n  componentDidMount() {\n    this.generateArray();\n  }\n\n  generateArray() {\n\n      const array = [];\n      for (let i = 0; i < 15; i++) {\n        array.push(Math.ceil(Math.random() * 50));\n      }\n      this.setState({array});\n\n  }\n\n  refreshPage() {\n    window.location.reload();\n    return false;\n  }\n\n  bubbleSort() {\n    let {array} = this.state;\n    const nodes = document.getElementsByClassName(\"node\");\n    let animations = bubbleSort(array);\n    \n    for (let index = 0; index < animations.length; index++) {\n\n      if (animations[index].mode === 0) {\n\n        setTimeout(() => {\n\n          // Change color to highlight comparison\n          nodes[animations[index].indices[0]].style.backgroundColor = \"lightgreen\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"lightgreen\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          // Color the back to clear the comparison\n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n\n      } else if (animations[index].mode === 1) {\n\n        setTimeout(() => {\n\n          // Visually changing the values\n          let oldValue = nodes[animations[index].indices[0]].innerHTML;\n          nodes[animations[index].indices[0]].innerHTML = nodes[animations[index].indices[1]].innerHTML;\n          nodes[animations[index].indices[1]].innerHTML = oldValue;\n\n\n          // Highlight the swap\n          nodes[animations[index].indices[0]].style.backgroundColor = \"yellow\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"yellow\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          // Color the back to clear the comparison\n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n \n      }\n    }\n\n  }\n\n  insertionSort() {\n    let {array} = this.state;\n    const nodes = document.getElementsByClassName(\"node\");\n    let initialLength = nodes.length;\n    let animations = insertionSort(array);\n\n\n    for (let index = 0; index < animations.length; index++) {\n\n      if (animations[index].mode === 0) {\n\n        setTimeout(() => {\n          var rect = nodes[animations[index].indices[0]].getBoundingClientRect();\n\n          var position = {\n            top: rect.top + window.pageYOffset,\n            left: rect.left + window.pageXOffset\n          };\n\n          var clonedPivot = nodes[animations[index].indices[0]].cloneNode(true);\n          $(clonedPivot).css({\n            'position': \"absolute\",\n            'left': `${position.left - 3}px`,\n            'top': `${position.top - 45}px`,\n            'width': `${$(nodes[animations[index].indices[0]]).width()}px`\n          });\n\n          $(\".array-div\").append(clonedPivot);\n\n        }, index * ALGO_SPEED);\n\n      } else if (animations[index].mode === 1) {\n\n        setTimeout(() => {\n\n          // Change color to highlight comparison\n          nodes[animations[index].indices[0] + (initialLength - 1)].style.backgroundColor = \"lightgreen\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"lightgreen\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          // Color the back to clear the comparison\n          nodes[animations[index].indices[1]].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n        \n      } else if (animations[index].mode === 2) {\n\n        setTimeout(() => {\n          \n          nodes[animations[index].indices[0]].style.backgroundColor = \"yellow\";\n          nodes[animations[index].indices[0] + 1].style.backgroundColor = \"yellow\";\n          nodes[animations[index].indices[0] + 1].innerHTML = nodes[animations[index].indices[0]].innerHTML;\n          nodes[animations[index].indices[0]].innerHTML = \"\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          nodes[animations[index].indices[0] + 1].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n        \n      } else if (animations[index].mode === 3) {\n\n        setTimeout(() => {\n          \n          nodes[animations[index].indices[0]].style.backgroundColor = \"orange\";\n          nodes[animations[index].indices[1] + (initialLength - 1)].style.backgroundColor = \"orange\";\n          nodes[animations[index].indices[0]].innerHTML = nodes[animations[index].indices[1] + (initialLength - 1)].innerHTML;\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          $(nodes[animations[index].indices[1] + (initialLength - 1)]).hide();\n\n        }, (index + 1) * ALGO_SPEED);\n\n      }\n      \n    }\n  }\n\n  quickSort() {\n    let {array} = this.state;\n    const nodes = document.getElementsByClassName(\"node\");\n    let animations = quickSortCall(array);\n    let newLeftPivot = null;\n    let newRightPivot = null;\n\n    for (let index = 0; index < animations.length; index++) {\n\n      if (animations[index].mode === 0) {\n\n        setTimeout(() => {\n\n          // Choosing the node at the end as the pivot to be placed in the final spot\n          nodes[animations[index].indices[0]].style.backgroundColor = \"orange\";\n          \n        }, index * ALGO_SPEED);\n\n      } else if (animations[index].mode === 1) {\n\n        setTimeout(() => {\n          \n          // Left pivot\n          if (newLeftPivot && newLeftPivot.style.backgroundColor !== \"orange\") {\n            newLeftPivot.style.backgroundColor = \"transparent\";\n          }\n          nodes[animations[index].indices[0]].style.backgroundColor = \"lightskyblue\";\n          newLeftPivot = nodes[animations[index].indices[0]];\n\n        }, index * ALGO_SPEED);\n        \n      } else if (animations[index].mode === 2) {\n        \n        setTimeout(() => {\n          \n          // Right pivot\n          if (newRightPivot && newRightPivot.style.backgroundColor !== \"orange\") {\n            newRightPivot.style.backgroundColor = \"transparent\";\n          }\n          nodes[animations[index].indices[0]].style.backgroundColor = \"darksalmon\";\n          newRightPivot = nodes[animations[index].indices[0]];\n\n        }, index * ALGO_SPEED);\n\n      } else if (animations[index].mode === 3) {\n        \n        setTimeout(() => {\n\n          // Visually changing the values\n          let oldValue = nodes[animations[index].indices[0]].innerHTML;\n          nodes[animations[index].indices[0]].innerHTML = nodes[animations[index].indices[1]].innerHTML;\n          nodes[animations[index].indices[1]].innerHTML = oldValue;\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          // Color the back to clear the comparison\n          // nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          // nodes[animations[index].indices[1]].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n\n      } else if (animations[index].mode === 4) {\n\n        setTimeout(() => {\n\n          // Visually changing the values\n          let oldValue = nodes[animations[index].indices[0]].innerHTML;\n          nodes[animations[index].indices[0]].innerHTML = nodes[animations[index].indices[1]].innerHTML;\n          nodes[animations[index].indices[1]].innerHTML = oldValue;\n\n          nodes[animations[index].indices[0]].style.backgroundColor = \"orange\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"transparent\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          // Color the back to clear the comparison\n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          nodes[animations[index].indices[1]].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n        \n        setTimeout(() => {\n          \n          var rect = nodes[animations[index].indices[0]].getBoundingClientRect();\n\n          var position = {\n            top: rect.top + window.pageYOffset,\n            left: rect.left + window.pageXOffset\n          };\n\n          var clonedPivot = nodes[animations[index].indices[0]].cloneNode(true);\n          $(clonedPivot).css({\n            'position': \"absolute\",\n            'left': `${position.left - 3}px`,\n            'top': `${position.top - 45}px`,\n            'width': `${$(nodes[animations[index].indices[0]]).width()}px`\n          });\n\n          $(\".array-div\").append(clonedPivot);\n\n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n\n          if (newLeftPivot) {\n            newLeftPivot.style.backgroundColor = \"transparent\";\n          }\n          \n          if (newRightPivot) {\n            newRightPivot.style.backgroundColor = \"transparent\";\n          }\n\n        }, (index + 1) * ALGO_SPEED);\n\n      }\n      \n    }\n  }\n\n  mergeSort() {\n    \n    let {array} = this.state;\n    const nodes = document.getElementsByClassName(\"node\");\n    let initialLength = nodes.length;\n    let animations = mergeSort(array, 0, array.length - 1);\n\n    for (let index = 0; index < initialLength; index++) {\n      \n      var rect = nodes[index].getBoundingClientRect();\n\n          var position = {\n            top: rect.top + window.pageYOffset,\n            left: rect.left + window.pageXOffset\n          };\n\n          var clonedPivot = nodes[index].cloneNode(true);\n          clonedPivot.innerHTML = \"\";\n          $(clonedPivot).css({\n            'position': \"absolute\",\n            'left': `${position.left - 3}px`,\n            'top': `${position.top - 45}px`,\n            'height': `${$(nodes[index]).height()}px`,\n            'width': `${$(nodes[index]).width()}px`\n          });\n\n          $(\".array-div\").append(clonedPivot);\n\n    }\n\n    for (let index = 0; index < animations.length; index++) {\n\n      if (animations[index].mode === 0) {\n      \n        setTimeout(() => {\n          \n          for (let index = initialLength; index < nodes.length; index++) {\n            nodes[index].innerHTML = \"\";\n          }\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          for (let sortIndex = animations[index].indices[0]; sortIndex <= animations[index].indices[1]; sortIndex++) {\n            nodes[sortIndex + initialLength].innerHTML = nodes[sortIndex].innerHTML;\n          }\n\n        }, (index + 1) * ALGO_SPEED);\n\n      } else if (animations[index].mode === 1) {\n\n        setTimeout(() => {\n\n          // Change color to highlight comparison\n          nodes[animations[index].indices[0] + initialLength].style.backgroundColor = \"lightgreen\";\n          nodes[animations[index].indices[1] + initialLength].style.backgroundColor = \"lightgreen\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          // Color the back to clear the comparison\n          nodes[animations[index].indices[0] + initialLength].style.backgroundColor = \"transparent\";\n          nodes[animations[index].indices[1] + initialLength].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n        \n      } else if (animations[index].mode === 2) {\n\n        setTimeout(() => {\n          \n          nodes[animations[index].indices[0]].style.backgroundColor = \"yellow\";\n          nodes[animations[index].indices[1] + initialLength].style.backgroundColor = \"yellow\";\n          nodes[animations[index].indices[0]].innerHTML = nodes[animations[index].indices[1] + initialLength].innerHTML;\n          nodes[animations[index].indices[1] + initialLength].innerHTML = \"\";\n\n        }, index * ALGO_SPEED);\n\n        setTimeout(() => {\n          \n          nodes[animations[index].indices[0]].style.backgroundColor = \"transparent\";\n          nodes[animations[index].indices[1] + initialLength].style.backgroundColor = \"transparent\";\n\n        }, (index + 1) * ALGO_SPEED);\n\n      } \n      \n    }\n\n  }\n\n  render() {\n\n    const {array} = this.state;\n\n    return (\n      <div className=\"app-div\">\n        <div className=\"array-div\">\n          {array.map((value, idx) => (\n            <div className=\"node\" key={idx}>{value}</div>\n          ))}\n        </div>\n        <div className=\"buttons-div\">\n          <button onClick={() => this.refreshPage()}>Generate New Array</button>\n          <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          <button onClick={() => this.insertionSort()}>Insertion Sort</button>\n          <button onClick={() => this.quickSort()}>Quick Sort</button>\n          <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        </div>  \n      </div>   \n    )\n  }\n}\n\nexport default SortingVisualizer;\n\n","export function bubbleSort(array) {\n\n  const COMP = 0;\n  const SWAP = 1;\n\n  const animations = [];\n\n  let sorted = false;\n  while (!sorted) {\n    let swap_count = 0;\n    for (let index = 0; index < array.length - 1; index++) {\n      // Push a comparison object to the animations array.\n      animations.push({mode: COMP, indices:[index, index + 1]});\n      if (array[index] > array[index + 1]) {\n        // Push a swap object to the animations array.\n        animations.push({mode: SWAP, indices: [index, index + 1]});\n        [array[index], array[index + 1]] = [array[index + 1], array[index]];\n        swap_count++;\n      }\n    }\n    if (swap_count === 0) sorted = true;\n  }\n\n  return animations;\n\n}","export function insertionSort(array) {\n\n  const PIVOT = 0;\n  const COMP = 1;\n  const DISPLACE = 2;\n  const PIVOT_SWAP = 3;\n\n  const animations = [];\n\n  let value;\n  let loop_index;\n  for (let i = 1; i < array.length; i++) {\n    animations.push({mode: PIVOT, indices:[i]});\n    value = array[i];\n    loop_index = i - 1;\n    while (loop_index >= 0) {\n      animations.push({mode: COMP, indices:[i, loop_index]});\n      if (array[loop_index] <= value) {\n        break;\n      }\n      animations.push({mode: DISPLACE, indices:[loop_index]});\n      array[loop_index + 1] = array[loop_index];\n      loop_index--;\n    }\n    animations.push({mode: PIVOT_SWAP, indices: [loop_index + 1, i]});\n    array[loop_index + 1] = value;\n  }\n\n  return animations;\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Sorting Visualizer</h1>\n        <p>Choose the algorithm, and watch it sort!</p>\n      </div>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}